                        Software Architecture
        ІПЗ             and Client-Server Interactions
                        ЛАБОРАТОРНА РОБОТА II
каф. ЕОМ, ХНУРЕ, 2025
       ■   Мета роботи
           Формування та реалізація клієнт-серверної архітектури додатку на основі ідеї
           та інфраструктури проекту, сформованої командою в результаті виконання
           попередньої роботи.
       ■   Теми та техніки що використовуються
       ■   клієнт-серверна архітектура додатків
       ■   технічний опис клієнт-серверної архітектури за допомогою UML
       ■   серіалізація та десеріалізація даних у формати xml та json
       ■   логування повідомлень серверу у файли
2025   каф. ЕОМ, ХНУРЕ                                                                    1
       ■   Software Architecture - набір сутностей та структур даних, які використовуються
           для організації правил та форм, котрими буде користуватися команда developers
           впродовж розробки проекту. Зосереджується на процесі розробки технічного
           плану проекту в цілому
       ■   Навіщо потрібна архітектура?
           ■    Формування загальних для всіх розробників правил додавання функціоналу
           ■    Спрощення процесу адаптації нових розробників в існуючий проект
           ■    Підвищення технічного рівня розробників, що працюють на проекті
           ■    Підвищення швидкості вивчення деталей проекту
           ■    Підвищення якості проекту
2025   каф. ЕОМ, ХНУРЕ                                                                       2
       ■   Архітектура програмного забезпечення
           ■    Визначає структури системи
           ■    Визначає поведінку системи
           ■    Визначає взаємні зв’язки між компонентами
           ■    Визначає тип зв’язків між компонентами
           ■    Врівноважує потреби зацікавлених сторін
           ■    Впливає на структуру команди
           ■    Зосереджується на великих важливих частинах проекту
           ■    Фіксує дізайнерскі рішення, реалізовані в прототипі
2025   каф. ЕОМ, ХНУРЕ                                                            4
       ■   Найбільш поширені типи архітектури програмних засобів
           ■    Layered pattern
           ■    Client-server pattern
           ■    Master-slave pattern
           ■    Broker pattern
           ■    Peer-to-peer pattern
           ■    Event-bus pattern
           ■    Model-view-controller pattern
2025   каф. ЕОМ, ХНУРЕ                                             5
       ■   Layered pattern - цей шаблон можна використовувати для
           структурування програм, які можна розкласти на шари / групи
           підзадач. При цьому кожна з цих підзадач знаходиться на повному
           рівні абстракції. Кожен рівень надає функціональність або дані
           наступному рівню, який знаходиться вище
       ■   Найбільш поширені рівні / шари а Layered pattern
           ■    Presentation layer - рівень презентації, або рівень інтерфейсу користувача
           ■    Application layer - прикладний або сервісний рівень
           ■    Business layer - рівень бізнес-логіки або рівень домену
           ■    Data access layer - рівень доступу до даних або рівень збереження
2025   каф. ЕОМ, ХНУРЕ                                                                       6
       ■   Client-server pattern - клієнт-серверний архітектурний патерн
           формується, як мінімум з одного клієнту та одного серверу. При
           цьому клієнт запитує послуги, а сервер - постачає послуги
           Взаємодія між клієнтом та сервером відбувається через мережу
           за допомогою якого-небудь прикладного або транспортного
           протоколу, що передбачає використання специфічних портів.
           Однією з головних переваг цього шаблону є централізоване обчислення даних,
           а також централізоване збереження інформації. Недоліком такого підходу
           є велика вразливість вивтеми у разі використання одного серверу
2025   каф. ЕОМ, ХНУРЕ                                                                  7
       ■   Master-slave pattern - різновид клієнт-серверного патерну, який складається
           з мережі, де вузлами є головний сервер / головний додаток, та робочі приховані
           вузли. Головний компонент системи розподіляє роботу / обчислювальну задачу
           між підлеглими компонентами / вузлами та обчислює остаточний результат,
           який формується з результатів, які повертають підлеглі вузли / додатки.
           Такий вид архітектури поширений при реплікації баз даних, організації
           розподілених обчислень для обслуговування супутникової системи
2025   каф. ЕОМ, ХНУРЕ                                                                      8
       ■   Broker pattern - шаблон поширений
           для вирішення проблеми структурування
           розподілених систем із роз’єднаними
           компонентами. При цьому ці компоненти
           можуть взаємодіяти один з одним за
           допомогою віддалених викликів служби.
           Компонент-брокер відповідає за
           координацію зв’язку між компонентами.
           Цей шаблон передбачає, шо сервери публікують свої можливості (послуги або
           доступ до даних) брокеру. Клієнти запитують послуги у брокера, а брокер в свою
           чергу перенаправляє клієнта до відповідної служби свого реєстру.
2025   каф. ЕОМ, ХНУРЕ                                                                      9
       ■   Peer-to-peer pattern - розподілена архітектура додатків,
           яка розподіляє завдання, або навантаження між рівними за
           можливостями / одноранговими вузлами, які в один і той же
           час відіграють роль і клієнтів і серверів.
           У разі такої організації всі вузли роблять частину своїх
           ресурсів, таких як обчислювальна потужність, дискове
           сховище або пропускна здатність мережі, доступними для інших учасників мережі
           без необхідності централізованої координації та керування зі сторони окремих
           виділених серверів.
2025   каф. ЕОМ, ХНУРЕ                                                                     10
       ■   Event Bus pattern - шаблон реалізує
           специфічну модель івент-орієнтованої
           архітектури та має 4 основних
           компонента
             ■   джерело події
             ■   слухач події
             ■   канал передавання інформації
             ■   шина події
           Джерела публікують повідомлення
           на певних каналах, які знаходяться
           на шині події. Слухачі підписуються на певні канали та отримують сповіщення про
           повідомлення, опубліковані на каналі, на який вони підписуються на початку роботи
           або в процесі виконання тих чи інших операцій
2025   каф. ЕОМ, ХНУРЕ                                                                         11
       ■   Model-View-Controller pattern - шаблон є специфічним різновидом Layer
           патернів, та передбачає розділення додатку на три основні частини / рівня
           ■    модель - містить основні дані та функції
           ■    представлення - відображає інтерфейс користувача
           ■    контролер - обробляє дії користувача
2025   каф. ЕОМ, ХНУРЕ                                       13
       ■   Дворівнева клієнт-серверна структура
           ■    Переваги
                - зручність організації
                - відносно низька вартість реалізації та розгортання
                - оптимальна для організації невеликих за функціональністю систем
           ■    Недоліки
                - проблеми масштабування
                - висока крихкість - у разі виходу серервеу з ладу - не працює вся система;
                - низька безпечність - сервер не валідує запит користувача та модифікує БД
2025   каф. ЕОМ, ХНУРЕ                                                   15
       ■   Трирівнева клієнт-серверна структура
           ■    Переваги
                - висока гнучкість та масштабованість
                - висока безпечність
                - висока швидкодія
           ■    Недоліки
                - підвищення вартості обслуговування
                - підвищення технічної складност
2025   каф. ЕОМ, ХНУРЕ                                  16
       ■   Найбільш поширені моделі взаємодії клієнт-серверної системи
           ■ Товстий клієнт
2025   каф. ЕОМ, ХНУРЕ                                                                              17
       ■   Товстий клієнт
           ■   Сервер перетворює запит від клієнта у запит до бази даних
           ■   Сервер не перевіряє деталі запиту від клієнта ті адресує його до бази даних
           ■   Сервер не практично не має захисту від шахрайства з боку клієнта

2025   каф. ЕОМ, ХНУРЕ                                                                                   18
       ■   Тонкий клієнт
           ■   Сервер перевіряє дані клієнта перед формуванням запиту до бази даних
           ■   Сервер відправляє запит до бази даних після валідації запиту користувача
           ■   Забезпечує захист від шахрайства з боку користувача на рівні 80-90%
2025   каф. ЕОМ, ХНУРЕ                                                                                           19
       ■   ТCP / Transmission Control Protocol - мережевий протокол, який
           забезпечує стабільність з’єднання між хостами перед початком
           обміну інформацією
           ■    Висока надійність обміну даними, шанс втрати даних мінімальний
           ■    Запитує підтвердження про отримання сповіщення хостом,
                який у випадку необхідності відправляє дані повторно
           ■    Низька швидкість передавання даних
           ■    Оптимально підходить для організації банківських операцій
2025   каф. ЕОМ, ХНУРЕ                                                           20
       ■   UDP / User Datagram Protocol - мережевий протокол, який відправляє
           дані без попереднього встановлення стабільного з’єднання
           між хостами мережі
           ■    Низька надійність та високий шанс втрати даних
           ■    Упорядкованість повідомлень не гарантується
           ■    Висока швидкість передавання даних
           ■    Оптимально підходить для стрімінгу
2025   каф. ЕОМ, ХНУРЕ                                                          21
       ■   Серіалізація
           Процес перетворення об’єкту або набору об’єктів у деякий універсальний
           формат для подальшої передачі між клієнтом та сервером або зберігання
           на жорстких дисках в файлах
       ■   Десеріалізація
           Процес перетворення інформації з деякого універсального формату
           зберігання даних у об’єкт вказаного тип
2025   каф. ЕОМ, ХНУРЕ                                                     33
       ■   Технічне завдання
       ■   Реалізувати клієнт-серверну інфраструктуру на основі використання HTTP або UDP
           для проекту, сформованого раніше
       ■   Реалізувати сериалізацію та десериалізацію повідомлень між клієнтом та сервером
       ■   Реалізувати логування на стороні серверу - збереження всіх повідомлень між
           клієнтом та сервером у текстовий файл, формат файлу обрати командою з переліку:
           вільний текстовий, xml або json
       ■   Сформувати UML-диаграмму клієнт-серверної взаємодії додатків
2025   каф. ЕОМ, ХНУРЕ                                                                     36
       ■   Варіант 3 Пошук вакансій на роботу за обраною спеціальністю
       ■   реалізація окремого клієнтського додатку
       ■   реалізація окремого серверного додатку
       ■   реалізація можливостей реєстрації / авторизації клієнта, який шукає роботу
       ■   реалізація обміну повідомленнями між клієнтом та сервером за допомогою UDP
       ■   реалізація збереження даних клієнтів, які шукають роботу, у файл на сервері за
           допомогою серіалізації у xml форматі
       ■   реалізація логування повідомлень та відповідей серверного додатку
       ■   реалізація можливостей додавання та зберігання інформації про вакансії доступні
           для оренди клієнтам на стороні серверної частини додатку