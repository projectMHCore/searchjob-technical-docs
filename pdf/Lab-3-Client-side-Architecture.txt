        ІПЗ             Client-side Architecture
                        ЛАБОРАТОРНА РОБОТА III
каф. ЕОМ, ХНУРЕ, 2025
       ■   Мета роботи
           Дослідження та реалізація найбільш поширених архітектур, які
           використовуються для організації роботи клієнтської частини у клієнт-
           серверних програмних засобах.
       ■   Теми та техніки що використовуються
       ■   клієнтська архітектура додатків
       ■   технічний опис архітектури клієнтської частини програмного засобу
           за допомогою UML
       ■   особливості реалізації архітектурних патернів MVC,MVP, MVVM
2025   каф. ЕОМ, ХНУРЕ                                                             1
       ■   UML / Unified Modeling Language - стандартизована мова опису, візуалізації,
           конструювання та документування загальної архітектури програмних засобів
           або окремих її частин. Створена у 1997 році.
             ■   UML- графічна мова для створення схем програмного забезпечення
             ■   UML - мова візуального моделювання та опису обчислювальних процесів
             ■   Не є мовою програмування, але використовується для створення коду
                 на різних мовах програмування
             ■   Має безпосереднє відношення до ООП та концепції SOLID
             ■   Оперує специфічними універсальними блоками
2025   каф. ЕОМ, ХНУРЕ                                                                   2
       ■   Області використання UML
             ■   Детальний опис класів / інтерфейсів / компонентів та їх призначення
             ■   Опис організації складних об’єктів
             ■   Опис ієрархічної організації класів / компонентів в проекті
             ■   Опис взаємодії компонентів при виконанні якоїсь функціональності
             ■   Опис взаємодії користувача з програмних засобом / системою
                 у рамках деякої user story
             ■   Опис взаємодії вузлів складної / розподіленої системи
             ■   Опис технічних процесів, які відбуваються у програмному засобі у часі
2025   каф. ЕОМ, ХНУРЕ                                                                      4
       ■   Class Diagram
           Діаграми класів є основним
           будівельним блоком будь-якого
           додатку, який створюється за
           допомогою концепцій ООП.
           Вони показують класи в системі,
           атрибути та операції кожного
           класу, а також зв’язок між ними.
           Клас складається з трьох частин:
           назви, даних та функціональності.
           Відносини між класами вказуються
           за допомогою стрілок різних типів.
2025   каф. ЕОМ, ХНУРЕ                          5
       ■   Object Diagram
           Діаграми об’єктів іноді називають
           діаграмами екземплярів. Об’їкти
           в діаграмах відображають
           дані та конкретні значення для
           підвищення якості моделювання.
           Як і діаграми класів, вони також
           показують зв’язок між об’єктами.
           Діаграми об’єктів показують як
           буде виглядати система в певний
           час. Використання конкретних
           даних в об’єктах пояснюють
           складні зв’язки між ними.
2025   каф. ЕОМ, ХНУРЕ                         6
       ■   Component Diagram
           Діаграма компонентів відображає
           структурний зв’язок компонентів
           програмної системи.
           Ними здебільшого користуються при
           роботі із системами, які мають велику
           кількість бібліотек та компонентів.
           Компоненти взаємодіють між собою
           за допомогою інтерфейсів.
           Інтерфейси з’єднані за допомогою роз’ємів
2025   каф. ЕОМ, ХНУРЕ                                 7
       ■   Package Diagram
           Діаграми пакетів / бібліотек
           використовуються для опису
           структури елементів високого
           рівня / взаємодії між великими
           модулями чи бібліотеками.
           Цей вид діаграм можна використовують
           для спрощення складних діаграм класів
           через те, що передбачається можливість
           їх (класів) групування в пакети.
           Пакет - набір логічно пов’язаних елементів або класів, які реалізують
           одну велику фічу або декілька поєднаних функціональностей.
2025   каф. ЕОМ, ХНУРЕ                                                             8
       ■   Deployment Diagram
           Зазвичай використовуються для
           створення описів взаємодії між
           програмними та апаратними засобами.
           Діаграми розгортання корисне
           у випадках коли програмне
           забезпечення розгорнуто на кількох
           машинах, кожна з яких має унікальну
           конфігурацію.
2025   каф. ЕОМ, ХНУРЕ                           9
       ■   Use Case Diagram
           Найвідоміший тип UML-діаграм, який
           використовується не тільки для
           проектування, но і для тестування
           програмного забезпечення.
           У діаграмах використовується
           графічний образ акторів - людей,
           які виконують яку-небудь роль,
           та функцій, необхідних цим акторам,
           а також тог, як ці функції
           пов’язані між собою.
2025   каф. ЕОМ, ХНУРЕ                           10
       ■   Activity Diagram
           Діаграми активності / роботи якоїсь
           функціональності створюються для
           опису робочого процесу.
           Такі діаграми використовуються для
           опису бізнес-процесу або робочого
           процесу будь-якого компонента системи.
           Діаграми активності зараз частіше
           використовуються замість граф-схем,
           кінцевих автоматів та інш.
2025   каф. ЕОМ, ХНУРЕ                              11
       ■   State Machine Diagram
           Діаграми кінцевого автомата є одними
           з найбільш поширених діаграм, які
           використовуються для опису будь-якого
           процесу, не завжди пов’язаного із розробкою
           програмного забезпечення.
           Цей вид діаграм описує поведінку об’єкта
           дослідження в залежності від його станів.
           Кожен перехід об’єкту між своїми станоми
           повинен мати свою назву / опис для
           спрощення діграми
2025   каф. ЕОМ, ХНУРЕ                                   12
       ■   Sequence Diagram
           Діаграми послідовності в UML показують
           процеси взаємодії об’єктів один з одним,
           а також порядок. в якому відбувається
           ця взаємодія.
           Процеси в таких діаграмах представлені
           вертикально, а взаємодії між об’єктами
           показані стрілками.
2025   каф. ЕОМ, ХНУРЕ                                                                       15
       ■   Generalization / Узагальненн
           Узагальнення - зв’язок, у якому один клас моделі / дочірній
           базується на іншому класі моделі (батьківському)
           Оскільки дочірні елементи моделі в узагальненнях
           успадковують дані та методи батьківського класу - в них
           можна визначити лише його власні поля та методи,
           які відрізняються від батьківських.
           Відношення узагальнення не мають назв.
2025   каф. ЕОМ, ХНУРЕ                                                             16
       ■   Specialization / Спеціалізація
           Спеціалізація - специфічний тип зв’язку, між типами,
           які поєднує успадкування, при якому від базових
           властивостей та характеристик ,базового типу даних
           увага фокусується на дочірньому типі та його
           особливостей, які можуть бути використані
           при вирішенні специфічних задач.
2025   каф. ЕОМ, ХНУРЕ                                                      17
       ■   Association / Асоціація
           Асоціація - зв’язок між двома типами даних, які не є
           частинами один одного, та не є незалежними один від
           одного. Асоціація - структурний зв’язок типів, які
           використовуються під час вирішення якоїсь задачі.
           Встановлення асоціативного зв’язку означає, що
           вказані типи можуть комунікувати між собою.
2025   каф. ЕОМ, ХНУРЕ                                                          18
       ■   Aggregation / Агрегація
           Агрегація - це особливий тип асоціації, у якому об’єкти   1
           збираються або конфігуруються разом для створення             Company
           більш складного об’єкта або вирішення складної задачі.
           Агрегація використовується у таких видах зв’язків між
           елементами системи, які передбачають їх незалежне
           один від одного існування, тобто обидва елементи               Office
           системи, які пов’язаня агрегацією не співіснують та       *
           не является структурними частинами один одного.
2025   каф. ЕОМ, ХНУРЕ                                                             19
       ■   Composition / Композиція
           Композиція є специфічним типом зв’язку між типами даних,      1
           який передбачає, існування одного типу, який складається            Studio
           з інших типів. При цьому час життя типів, які є складовими
           частинами безпосередньо пов’язаний із часом життя
           великого типу, який їх поєднує.
           Відповідно до цього, видалення об’єкту головного / великого       Department
           типу даних має призводить до видалення об’єктів, які          *
           є його складовими частинами.
2025   каф. ЕОМ, ХНУРЕ                                                                    20
       ■   Dependency / Залежніст
           Зв’язок такого виду між типами даних вказує на
           залежність існування або можливості використання
           одного типу даних від існування іншого типу даних.
       ■   Usage / Використанн
           Зв’язок такого виду між типами даних вказує
           на можливість використання одним типо іншого
           при виконанні тієї чи іншої функціональності.
2025   каф. ЕОМ, ХНУРЕ                                                                           21
       ■   Model-View-Controller Pattern - найбільш розповсюджена реалізація багато-
           рівневої архітектури програмних засобів. Здебільшого використовується у частині
           клієнтських додатків. Став базовим патерном, на основі якого потім
           були створені патерни MVP та MVVM
       ■   Особливості архітектури
           ■    Додаток розділяється на три основних рівня
           ■    Рівень Model використовується для визначення основних компонентів
                та структур даних, які буде використовувати програмний засіб
           ■    Рівень View використовується для забезпечення взаємодії з користувачем
           ■    Рівень Controller має реалізацію всієї бізнес-логіки додатку та організовує
                взаємодію між іншими рівнями архітектури
       ■   Переваги MVC Pattern
           ■    Простота розгортання та реалізації
           ■    Поширеність та зручність адаптації нових спеціалістів
           ■    Можливість паралельної реалізації
           ■    Універсальність через можливість легкої заміни технології розробки GUI
       ■   Недоліки MVC Pattern
           ■    Висока ймовірність зростання відповідальностей у контролерах
           ■    Висока ймовірність формування супер-контролерів
           ■    Великий обсяг інфраструктурного коду
           ■    Складність системного та інтеграційного автоматизованого тестування
2025   каф. ЕОМ, ХНУРЕ                                                                   24
       ■   Model-View-Presenter Pattern - поширений патерн розробки клієнтської
           частини клієнт-серверного програмного засобу. MVP є модифікованою версією
           найбільш поширеного патерну MVC, в якому рівень контролерів був змінений
           на рівень Presenter, який менш пов’язаний з рівнем Model та використовується
           у якості функціонального посередника.
       ■   Особливості архітектури
           ■    Рівень Model реалізує бізнес-логіку додатку, має зв’язки з базою даних
                та реалізує основну функціональність своєї частини програмного засобу
           ■    Рівень View використовується для забезпечення взаємодії з користувачем
           ■    Рівень Presenter є посередником між рівнями Model та View, що відповідає
                за обмін інформацією між ними
           ■    повністю ізолює рівень Model від рівня View
       ■   Переваги MVP Pattern
           ■    Зручне розділення функціональності програмних засобів на рівні
           ■    Можливість паралельної розробки
           ■    Низькі технічні вимоги до кваліфікації співробітників
           ■    Зручність розгортання системи інтеграційного- та модульного-тестування
       ■   Недоліки MVP Pattern
           ■    Велика ймовірність створення моделей, які одночасно відповідають
                за різні функціональні обов’язки
           ■    Проблеми масштабування архітектури при зростанні функціональності
           ■    Великі обсяги інфраструктурного коду для організації зв’язку
                між рівнями View та Presenter
2025   каф. ЕОМ, ХНУРЕ                                                                   27
       ■   Model-View-ViewModel Pattern - один з найбільш поширених архітектурних
           патернів, що застосовується під час розробки desktop-додатків. Патерн створений на
           основі архітектурного патерну MVC. Повністю ізолює рівень інтерфейсу користувача
           від рівня даних.
       ■   Особливості архітектури
           ■    Рівень Model використовується для визначення основних компонентів
                та структур даних, які буде використовувати програмний засіб
           ■    Рівень View використовується для забезпечення взаємодії з користувачем
           ■    Рівень ViewModel реалізує бізнес-логіку додатку, має зв’язки з рівнями Model
                та View які не можуть безпосередньо взаємодіяти між собою
           ■    Використовує прив’язку даних для автоматизації обміну даними
                між рівнями ViewModel та View
2025   каф. ЕОМ, ХНУРЕ                                                                          28
       ■   Переваги MVVM Pattern
           ■    Автоматизація процесу оновлення інтерфейсу користувача при зміні даних
           ■    Автоматизація процесу обміну даними між рівнями Model та ViewModel
           ■    Можливість паралельної розробки
           ■    Зручність масштабування додатку
       ■   Недоліки MVC Pattern
           ■    Висока технічна складність реалізації порівняно з іншими поширеними
                архітектурними патернами розробки клієнтської частини програмного засобу
           ■    Висока складність розгортання інтеграційного та модульного тестування
           ■    Високі технічні вимоги до спеціалістів, що працюють над проектом
2025   каф. ЕОМ, ХНУРЕ                                                                     30
       ■   Технічне завдання
       ■   Реалізувати один з патернів MVC, MVP або MVVM на клієнтській частині
           клієнт-серверного програмного засобу, сформованого раніше
       ■   Провести рефакторинг коду клієнтської частини додатку відповідно
           до обраного архітектурного патерну
       ■   Сформувати UML-діаграму клієнтської частини програмного засобу
           на рівні компонентів
       ■   Сформувати UML-діаграму класів для рівня Model клієнтської частини
       ■   Сформувати UML-діаграму класів для
           - рівня Controller у випадку використання патерну MVC,
           - рівня ViewModel у випадку використання патерну MVVM,
           - рівня Presenter у випадку використання патерну MVP.