        ІПЗ             Server-side Application
                        ЛАБОРАТОРНА РОБОТА IV
каф. ЕОМ, ХНУРЕ, 2025
       ■   Мета роботи
           Реалізація серверного додатку за вказаними вимогами задля забезпечення
           логування повідомлень, формування черги повідомлень, яка опрацьовується
           окремими потоками серверного додатку. Дослідження та реалізація моделей
           організації взаємодії Long Polling та Short Polling.
       ■   Теми та техніки що використовуються
       ■   види клієнт-серверних архітектур
       ■   розробка багатопоточного серверного додатку
       ■   реалізація взаємодії за принципами “тонкий клієнт” або “товстий клієнт”
       ■   реалізація Short Polling або Long Polling

2025   каф. ЕОМ, ХНУРЕ                                                               1
       ■   Клієнт-серверна архітектура - найбільш розповсюджений патерн, який
           використовується при створенні складних програмних засобів, що передбачає
           підтримку великої кількості споживачів. Головна ідея патерну полягає у
           розділенні функціональності програмного засобу на дві частини: клієнтську
           та серверну, а також використання мережі для організації зв’язку між ними
       ■   Поширені види клієнт-серверної архітектури
           ■    Однорівнева клієнт-серверна архітектура
           ■    Дворівнева клієнт-серверна архітектура
           ■    Трирівнева клієнт-серверна архітектура
           ■    N-рівнева клієнт-серверна архітектура
2025   каф. ЕОМ, ХНУРЕ                                                                 2
       ■   Однорівнева клієнт-серверна архітектура
           ■    Передбачає відсутність центрального серверну, який регламентує
                роботу клієнтів, обробляє їх запити та надає клієнтам дані
           ■    Всі клієнти мають однакові функціональні можливості на рівні права
           ■    Всі клієнти звертаються до одного файлового серверу
                або одного серверу бази даних
           ■    Сервер БД дуже вразливий до великої кількості запитів та, здебільшого,
                не займається валідацією клієнтських запитів
           ■    Часто виникають проблеми синхронізації даних через велику кількість
                варіантів даних на різних клієнтах
2025   каф. ЕОМ, ХНУРЕ                                                                                    4
       ■   Однорівнева клієнт-серверна архітектура
           ■    Переваги
                - простота реалізації та розгортання
                - відносно невеликі вимоги до файл-серверної частини
                - немає механізму розподілення ролей для доступа до інформації
           ■    Недоліки
                - проблеми з синхронізацією даних між великою кількістю клієнтів
                - висока вразливість системи при діях зловмисників
                - низькі можливості масштабування кількості клієнтських додатків
2025   каф. ЕОМ, ХНУРЕ                                                             5
       ■   Дворівнева клієнт-серверна архітектура
           ■    Передбачає існування серверного додатку / Application Server, який
                може проводити валідацію запитів від клієнтів
           ■    Найбільш поширена архітектура для роботи з невеликим
                за функціональністю програмними засобами
           ■    Передбачає можливості роботи у одному з двох варіантів:
                - “fat client thin server”, коли клієнтський додаток має багато повноважень
                - “thin client fat server”, коли клієнтський додаток майже не має повноважень
           ■    Система дуже вразлива до збоїв на частині Application Server
2025   каф. ЕОМ, ХНУРЕ                                                                                             7
       ■   Дворівнева клієнт-серверна архітектура
           ■    Переваги
                - простота реалізації та розгортання
                - відносно низька вартість
                - оптимальна для організації невеликих за функціональністю систем
                - має більший захист ніж однорівнева клієнт-серверна архітектура
           ■    Недоліки
                - проблеми масштабування клієнтських додатків
                - висока крихкість - у разі виходу серервеу з ладу - не працює вся система
                - низька безпечність у режимі “fat client thin server”
2025   каф. ЕОМ, ХНУРЕ                                                                       8
       ■   Трирівнева клієнт-серверна архітектура
           ■    Передбачається розділення серверної функціональності на частину
                ApplicationServer та частину DataBaseApplicationServer
           ■    Частина ApplicationServer безпосередньо співпрацює з клієнтськими
                додатками та не має прямого доступу до бази даних
           ■    Частина ApplicationServer виконує первинну валідацію запитів клієнтських
                додатків на виконання тих чи інших функцій
           ■    Частина DataBaseApplicationServer безпосередньо співпрацює
                базою даних, формує запити на зміну даних, версіонує клієнтів
                та передає оновлені стани клієнтів на частину ApplicationServer
2025   каф. ЕОМ, ХНУРЕ 9
       ■   Трирівнева клієнт-серверна архітектура
           ■    Переваги
                - забезпечення гарного захисту даних від підміни або дублювання sql-запитів
                - забезпечення захисту від клонування клієнтів
                - простота адміністрування
                - гарна синхронізація даних
           ■    Недоліки
                - збільшення вартості реалізації порівняно із дворівневими архітектурами
                - підвищення технічних вимог до кваліфікації співробітників
                - вразливість системи до проблем на рівнях серверних частин додаткі
2025   каф. ЕОМ, ХНУРЕ                                                                        11
       ■   N-рівнева клієнт-серверна архітектура
           ■    Передбачається розділення серверної функціональності на частину
                ApplicationServer та частину DataBaseMasterApplicationServer, а також
                приховані рівні сегментів баз даних
           ■    Частина ApplicationServer безпосередньо співпрацює з клієнтськими додатками
                та виконує первинну валідацію запитів клієнтських додатків на виконання
                тих чи інших функцій
           ■    Частина DataBaseMasterApplicationServer співпрацює з додатками сегментів,
                які співпрацюють з окремою частиною розподіленої бази даних
           ■    Частини DataBaseSegmentApplicationServer формує запити на зміну даних,
                версіонує клієнтів та передає оновлені стани клієнтів на частину мастеру
2025   каф. ЕОМ, ХНУРЕ                                                                                                                                            13
       ■   N-рівнева клієнт-серверна архітектура
           ■    Переваги
                - розподілене зберігання даних
                - підвищення захисту системи від зловмисницьких дій користувачів
                - підвищення швидкості обробки запитів користувачів
                - покращення можливостей масштабування
           ■    Недоліки
                - висока складність системи
                - висока вартість системи
                - високі вимоги до кваліфікації співробітників
2025   каф. ЕОМ, ХНУРЕ                                                             14
       ■   Кластери серврів
           ■    На другому рівні системи виділяється декілька кластерів,
                які займаються обробкою запитів з клієнтів
           ■    Сервери, що формують кластер, перерозподіляють між собою об’єми
                клієнтських запитів та можуть замінювати один одного у випадку
                виникнення проблем на одному з кластерів
           ■    Використовуються для підвищення надійності клієнт-серверної системи
           ■    Будь-які сервери кластеру можуть обмінюватися повідомленнями
                між собою та з базою даних
           ■    Будь-які сервери кластеру можуть обмінюватися повідомленнями з клієнтами
2025   каф. ЕОМ, ХНУРЕ                                                                                                  16
       ■   Балансувальники навантаження на сервери
           ■    Балансувальники використовуються для регулювання навантаження
                у вигляді клієнтських запитів та їх обробки між серверами системи
           ■    Балансувальник приймає запити від клієнтів та перенаправляє їх на вільний
                сервер для подальшої обробки
           ■    Балансувальних не валідує запити від клієнтів
           ■    Балансувальних не співпрацює з базою даних
           ■    Задля підвищення безпечності роботи система зазвичай використовує
                декілька балансувальників, які пов’язані між собою та всіма серверами,
                що займаються опрацюванням клієнтських запитів
2025   каф. ЕОМ, ХНУРЕ                                                                                             18
       ■   Transmission Control Protocol / Internet Protocol - набор протоколів, що
           використовуються для передавання даних, який отримав назву від двух належних до
           нього протоколів - TCP та IP
           ■    HTTP - протокол передавання гіпертексту
           ■    HTTPS - розширення HTTP для підтримки шифрування з метою підвищення
                безпеки завдяки криптографічних протоколів SSL та TSL
           ■    SSL / Secure Sockets Layer - безпечний криптографічний протокол
           ■    FTP / File Transfer Protocol - протокол передавання файлів з файл-серверу
           ■    POP3 / Post Office Protocol - протокол передачі поштових повідомлень
           ■    SMTP / Simple Mail Transfer Protocol - протокол передачі пошти
           ■    DTN - протокол для мереж космічного зв’язку IPN, яким користується NASA
2025   каф. ЕОМ, ХНУРЕ                                                                       19
       ■   HTTP / HTTPs - протокол, який дозволяє отримувати ресурси з мережі, наприклад
           HTML-документи. Цей протокол є основою обміну даними у глобальній мережі, та
           використовується при організації взаємодії між частинами клієнт-серверних
           програмних засобів
           ■    Запити до сервера ініціюються клієнтом / одерживачем (web-browser)
           ■    Документи передаються частинами, клієнт уточнює та запитує у сервера
                необхідні частини документів для роботи
           ■    Кожне передавання даних має підтвердження
           ■    Використовує специфічні порти - 80 для HTTP, та 443 для HTTPs
2025   каф. ЕОМ, ХНУРЕ                                                                     20
       ■   Polling - спосіб організації взаємодії між клієнтським та серверним додатком,
           який передбачає формування клієнтом регулярних запитів на отримання
           або зміну даних сервером.
       ■   Short Polling - техніка, відповідно до якої клієнт надсилає повідомлення на
           сервер із запитом на доступ або зміну даних через фіксовані затримки часу
           після отримання відповіді на попередньо надісланий запит; сервер при
           цьому миттєво відповідає на запити клієнтів
           ■    Клієнт надсилає запит на сервер
           ■    Сервер відповідає порожньою відповіддю або даними
           ■    Клієнт очікує деякий визначений час та знову відправляє запит до сервера
           ■    Сервер відповідає порожньою відповіддю або даними

2025   каф. ЕОМ, ХНУРЕ                                                                     21
       ■   Long Polling - техніка, відповідно до якої клієнт надсилає повідомлення на
           сервер із запитом на доступ або зміну даних через фіксовані затримки часу
           після отримання відповіді на попередньо надісланий запит, але очікує
           відповіді від сервера протягом невизначеного часу
           ■    Клієнт надсилає запит на сервер
           ■    Сервер відповідає коли в нього з’являються дані, або допоки
                не спливе термін очікування
           ■    Клієнт надсилає запит на сервер
           ■    Сервер відповідає коли в нього з’являються дані, або допоки
                не спливе термін очікування
           ■    Сервер відповідає коли в нього з’являються дані, або допоки
                не спливе термін очікування
2025   каф. ЕОМ, ХНУРЕ                                                                  23
       ■   Технічне завдання
       ■   Реалізувати принцип клієнт-серверної взаємодії “тонкий клієнт” для проекту,
           обраного на ЛБ 1, та опрацьованого впродовж наступних лабораторних робіт
       ■   Реалізувати обмін даними між клієнтським та серверним додатком за допомогою
           токенів замість пересилання інформації авторизованого користувача
           на кожному запиті: у випадку успішної авторизації сервер формує унікальний
           токен з літер латинського алфавіту та цифр, який від передає як ідентифікатор
           цього клієнта у подальших повідомленнях. Таким чином, клієнт у наступних
           повідомленнях серверну має використовувати цей унікальний токен замість того,
           щоб постійно передавати свій email та пароль у кожних повідомленнях
       ■   Реалізувати ідею Short Polling або Long Polling на клієнтській та серверній
           частинах додатк
2025     каф. ЕОМ, ХНУРЕ                                                                                                                        25
       ■   Технічне завдання
       ■   Реалізувати логування клієнтських повідомлень та серверних відповідей
           на серверній частині додатку
       ■   Провести рефакторинг коду клієнтської та серверної частин додатку відповідно
           до обраного завдання
       ■   Сформувати UML-діаграми серверної частини програмного засобу
           на рівні компонентів та на рівні класів