<?php
/**
 * –ï–¥–∏–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ Job Search
 * –°–æ–∑–¥–∞–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
 */

$config = require __DIR__ . '/../config/db.php';

try {
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    $db = new mysqli($config['host'], $config['username'], $config['password'], $config['database'], $config['port']);
    
    if ($db->connect_error) {
        die('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: ' . $db->connect_error);
    }
    
    echo "<h1>üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Job Search</h1>";
    echo "<p>–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...</p>";
    
    // 1. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    echo "<h2>1. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã users</h2>";
    $createUsersTable = "
    CREATE TABLE IF NOT EXISTS users (
        id INT AUTO_INCREMENT PRIMARY KEY,
        login VARCHAR(255) NOT NULL UNIQUE,
        password VARCHAR(255) NOT NULL,
        email VARCHAR(255) NOT NULL UNIQUE,
        role ENUM('job_seeker', 'employer', 'admin') DEFAULT 'job_seeker',
        company_name VARCHAR(255) NULL,
        first_name VARCHAR(100) NULL,
        last_name VARCHAR(100) NULL,
        phone VARCHAR(20) NULL,
        birth_date DATE NULL,
        city VARCHAR(100) NULL,
        experience_years INT NULL,
        education TEXT NULL,
        skills TEXT NULL,
        about_me TEXT NULL,
        salary_expectation VARCHAR(100) NULL,
        company_description TEXT NULL,
        company_address VARCHAR(255) NULL,
        company_website VARCHAR(255) NULL,
        company_size VARCHAR(50) NULL,
        company_industry VARCHAR(100) NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )";
    
    if ($db->query($createUsersTable)) {
        echo "‚úÖ –¢–∞–±–ª–∏—Ü–∞ users —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ<br>";
    } else {
        echo "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã users: " . $db->error . "<br>";
    }
    
    // 2. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Ç–æ–∫–µ–Ω–æ–≤
    echo "<h2>2. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã user_tokens</h2>";
    $createTokensTable = "
    CREATE TABLE IF NOT EXISTS user_tokens (
        user_id INT NOT NULL,
        token VARCHAR(64) NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
    )";
    
    if ($db->query($createTokensTable)) {
        echo "‚úÖ –¢–∞–±–ª–∏—Ü–∞ user_tokens —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ<br>";
    } else {
        echo "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã user_tokens: " . $db->error . "<br>";
    }
    
    // 3. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –≤–∞–∫–∞–Ω—Å–∏–π
    echo "<h2>3. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã vacancies</h2>";
    $createVacanciesTable = "
    CREATE TABLE IF NOT EXISTS vacancies (
        id INT AUTO_INCREMENT PRIMARY KEY,
        employer_id INT NOT NULL,
        title VARCHAR(255) NOT NULL,
        description TEXT NOT NULL,
        salary VARCHAR(64) NULL,
        location VARCHAR(100) NULL,
        company VARCHAR(100) NULL,
        requirements TEXT NULL,
        employment_type VARCHAR(50) NULL,
        is_active TINYINT(1) DEFAULT 1,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (employer_id) REFERENCES users(id) ON DELETE CASCADE
    )";
    
    if ($db->query($createVacanciesTable)) {
        echo "‚úÖ –¢–∞–±–ª–∏—Ü–∞ vacancies —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ<br>";
    } else {
        echo "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã vacancies: " . $db->error . "<br>";
    }
    
    // 4. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –æ—Ç–∫–ª–∏–∫–æ–≤
    echo "<h2>4. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã applications</h2>";
    $createApplicationsTable = "
    CREATE TABLE IF NOT EXISTS applications (
        id INT AUTO_INCREMENT PRIMARY KEY,
        vacancy_id INT NOT NULL,
        user_id INT NOT NULL,
        cover_letter TEXT NULL,
        status ENUM('pending', 'accepted', 'rejected') DEFAULT 'pending',
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (vacancy_id) REFERENCES vacancies(id) ON DELETE CASCADE,
        FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
        UNIQUE KEY unique_application (vacancy_id, user_id)
    )";
    
    if ($db->query($createApplicationsTable)) {
        echo "‚úÖ –¢–∞–±–ª–∏—Ü–∞ applications —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ<br>";
    } else {
        echo "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã applications: " . $db->error . "<br>";
    }
    
    // 5. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    echo "<h2>5. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</h2>";
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    $checkUsers = $db->query("SELECT COUNT(*) as count FROM users");
    $userCount = $checkUsers->fetch_assoc()['count'];
    
    if ($userCount == 0) {
        $testUsers = [
            [
                'login' => 'admin',
                'email' => 'admin@jobsearch.com',
                'password' => password_hash('admin123', PASSWORD_DEFAULT),
                'role' => 'admin',
                'first_name' => '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
                'last_name' => '–°–∏—Å—Ç–µ–º—ã'
            ],
            [
                'login' => 'employer1',
                'email' => 'employer@techcorp.com',
                'password' => password_hash('password123', PASSWORD_DEFAULT),
                'role' => 'employer',
                'company_name' => 'TechCorp',
                'first_name' => '–ò–≤–∞–Ω',
                'last_name' => '–ò–≤–∞–Ω–æ–≤',
                'company_description' => '–í–µ–¥—É—â–∞—è IT-–∫–æ–º–ø–∞–Ω–∏—è, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∞—è—Å—è –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π',
                'company_address' => '–ú–æ—Å–∫–≤–∞, —É–ª. –¢–≤–µ—Ä—Å–∫–∞—è, 1',
                'company_website' => 'https://techcorp.com',
                'company_size' => '50-100',
                'company_industry' => '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏'
            ],
            [
                'login' => 'jobseeker1',
                'email' => 'jobseeker@example.com',
                'password' => password_hash('password123', PASSWORD_DEFAULT),
                'role' => 'job_seeker',
                'first_name' => '–ü–µ—Ç—Ä',
                'last_name' => '–ü–µ—Ç—Ä–æ–≤',
                'city' => '–ú–æ—Å–∫–≤–∞',
                'experience_years' => 3,
                'education' => '–í—ã—Å—à–µ–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ',
                'skills' => 'PHP, JavaScript, MySQL, HTML, CSS',
                'about_me' => '–û–ø—ã—Ç–Ω—ã–π –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ —Å 3-–ª–µ—Ç–Ω–∏–º —Å—Ç–∞–∂–µ–º —Ä–∞–±–æ—Ç—ã',
                'salary_expectation' => '80000-120000'
            ]
        ];
        
        foreach ($testUsers as $user) {
            $fields = implode(', ', array_keys($user));
            $placeholders = ':' . implode(', :', array_keys($user));
            
            $stmt = $db->prepare("INSERT INTO users ($fields) VALUES ($placeholders)");
            
            foreach ($user as $key => $value) {
                $stmt->bind_param($key === 'password' ? 's' : 's', $value);
            }
            
            if ($stmt->execute()) {
                echo "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {$user['login']} —Å–æ–∑–¥–∞–Ω<br>";
            } else {
                echo "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {$user['login']}: " . $stmt->error . "<br>";
            }
        }
    } else {
        echo "‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö ($userCount –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)<br>";
    }
    
    // 6. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π
    echo "<h2>6. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π</h2>";
    
    // –ü–æ–ª—É—á–∞–µ–º ID —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è
    $employerResult = $db->query("SELECT id FROM users WHERE role = 'employer' LIMIT 1");
    if ($employerResult && $employerResult->num_rows > 0) {
        $employerId = $employerResult->fetch_assoc()['id'];
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –≤–∞–∫–∞–Ω—Å–∏–∏
        $checkVacancies = $db->query("SELECT COUNT(*) as count FROM vacancies");
        $vacancyCount = $checkVacancies->fetch_assoc()['count'];
        
        if ($vacancyCount == 0) {
            $testVacancies = [
                [
                    'title' => 'PHP —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫',
                    'description' => '–¢—Ä–µ–±—É–µ—Ç—Å—è –æ–ø—ã—Ç–Ω—ã–π PHP —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º–∏.',
                    'salary' => '80000-120000 —Ä—É–±',
                    'location' => '–ú–æ—Å–∫–≤–∞',
                    'company' => 'TechCorp',
                    'requirements' => 'PHP, MySQL, JavaScript, –æ–ø—ã—Ç –æ—Ç 3 –ª–µ—Ç',
                    'employment_type' => '–ü–æ–ª–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å'
                ],
                [
                    'title' => 'Frontend —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫',
                    'description' => '–ò—â–µ–º —Ç–∞–ª–∞–Ω—Ç–ª–∏–≤–æ–≥–æ frontend —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤.',
                    'salary' => '70000-100000 —Ä—É–±',
                    'location' => '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥',
                    'company' => 'WebStudio',
                    'requirements' => 'React, TypeScript, CSS3, HTML5',
                    'employment_type' => '–£–¥–∞–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞'
                ],
                [
                    'title' => 'Backend —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫',
                    'description' => '–¢—Ä–µ–±—É–µ—Ç—Å—è backend —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤—ã—Å–æ–∫–æ–Ω–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏.',
                    'salary' => '90000-140000 —Ä—É–±',
                    'location' => '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫',
                    'company' => 'DataSystems',
                    'requirements' => 'Python, Django, PostgreSQL, Redis',
                    'employment_type' => '–ì–∏–±–∫–∏–π –≥—Ä–∞—Ñ–∏–∫'
                ]
            ];
            
            foreach ($testVacancies as $vacancy) {
                $stmt = $db->prepare("
                    INSERT INTO vacancies (employer_id, title, description, salary, location, company, requirements, employment_type) 
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?)
                ");
                
                $stmt->bind_param('isssssss', 
                    $employerId,
                    $vacancy['title'],
                    $vacancy['description'],
                    $vacancy['salary'],
                    $vacancy['location'],
                    $vacancy['company'],
                    $vacancy['requirements'],
                    $vacancy['employment_type']
                );
                
                if ($stmt->execute()) {
                    echo "‚úÖ –í–∞–∫–∞–Ω—Å–∏—è '{$vacancy['title']}' —Å–æ–∑–¥–∞–Ω–∞<br>";
                } else {
                    echo "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏ '{$vacancy['title']}': " . $stmt->error . "<br>";
                }
            }
        } else {
            echo "‚ÑπÔ∏è –í–∞–∫–∞–Ω—Å–∏–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö ($vacancyCount –≤–∞–∫–∞–Ω—Å–∏–π)<br>";
        }
    } else {
        echo "‚ö†Ô∏è –†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–∞–∫–∞–Ω—Å–∏–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã<br>";
    }
    
    // 7. –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    echo "<h2>7. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö</h2>";
    
    $stats = [
        'users' => $db->query("SELECT COUNT(*) as count FROM users")->fetch_assoc()['count'],
        'employers' => $db->query("SELECT COUNT(*) as count FROM users WHERE role = 'employer'")->fetch_assoc()['count'],
        'job_seekers' => $db->query("SELECT COUNT(*) as count FROM users WHERE role = 'job_seeker'")->fetch_assoc()['count'],
        'vacancies' => $db->query("SELECT COUNT(*) as count FROM vacancies")->fetch_assoc()['count'],
        'active_vacancies' => $db->query("SELECT COUNT(*) as count FROM vacancies WHERE is_active = 1")->fetch_assoc()['count'],
        'applications' => $db->query("SELECT COUNT(*) as count FROM applications")->fetch_assoc()['count']
    ];
    
    echo "<table border='1' style='border-collapse: collapse;'>";
    echo "<tr><th>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</th><th>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</th></tr>";
    echo "<tr><td>üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</td><td>{$stats['users']}</td></tr>";
    echo "<tr><td>üè¢ –†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–π</td><td>{$stats['employers']}</td></tr>";
    echo "<tr><td>üë§ –°–æ–∏—Å–∫–∞—Ç–µ–ª–µ–π</td><td>{$stats['job_seekers']}</td></tr>";
    echo "<tr><td>üíº –í—Å–µ–≥–æ –≤–∞–∫–∞–Ω—Å–∏–π</td><td>{$stats['vacancies']}</td></tr>";
    echo "<tr><td>üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π</td><td>{$stats['active_vacancies']}</td></tr>";
    echo "<tr><td>üìù –û—Ç–∫–ª–∏–∫–æ–≤</td><td>{$stats['applications']}</td></tr>";
    echo "</table>";
    
    echo "<h2>8. –¢–µ—Å—Ç–æ–≤—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</h2>";
    echo "<table border='1' style='border-collapse: collapse;'>";
    echo "<tr><th>–†–æ–ª—å</th><th>–õ–æ–≥–∏–Ω</th><th>–ü–∞—Ä–æ–ª—å</th><th>Email</th></tr>";
    echo "<tr><td>üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</td><td>admin</td><td>admin123</td><td>admin@jobsearch.com</td></tr>";
    echo "<tr><td>üè¢ –†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å</td><td>employer1</td><td>password123</td><td>employer@techcorp.com</td></tr>";
    echo "<tr><td>üë§ –°–æ–∏—Å–∫–∞—Ç–µ–ª—å</td><td>jobseeker1</td><td>password123</td><td>jobseeker@example.com</td></tr>";
    echo "</table>";
    
    echo "<h2>9. –ù–∞–≤–∏–≥–∞—Ü–∏—è</h2>";
    echo "<p>";
    echo "<a href='index.php'>üè† –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞</a> | ";
    echo "<a href='login.php'>üîê –í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É</a> | ";
    echo "<a href='register.php'>üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</a> | ";
    echo "<a href='vacancy_list.php'>üíº –°–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π</a>";
    echo "</p>";
    
    echo "<p style='color: green; font-weight: bold;'>üéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!</p>";
    
} catch (Exception $e) {
    echo "<p style='color: red;'>‚ùå –û—à–∏–±–∫–∞: " . $e->getMessage() . "</p>";
}
?>
